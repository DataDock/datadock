@model DataDock.Web.ViewModels.DashboardViewModel
@{
  Layout = "~/Views/Shared/_DashboardBaseLayout.cshtml";
  Model.Title = Model.Title + " Job History";
}


<div class="ui container">
  @await Component.InvokeAsync("JobHistory", new { selectedOwnerId = Model.SelectedOwnerId, selectedRepoId = Model.SelectedRepoId, currentJobId = ViewData["JobId"] })
</div>

@section Scripts {

    <environment names="Development">
        <script src="~/lib/signalr/signalr.js"></script>
    </environment>
    <environment names="Staging,Production">
        <script src="~/lib/signalr/signalr.min.js"></script>
    </environment>
    <script>
        $(function() {

            //var connection = new signalR.HubConnection('/progress');
            var connection = new signalR.HubConnectionBuilder().withUrl('/progress')
                .configureLogging(signalR.LogLevel.Information).build();

            // Create a function that the hub can call to broadcast messages.
            connection.on('sendMessage',
                function(userId, message) {
                    console.log(userId + ' ' + message);
                });

            connection.on('progressUpdated',
                function(ownerId, jobId, progressMessage) {
                    console.log('progressUpdated', ownerId, jobId, progressMessage);
                    if (ownerId === '@Model.SelectedOwnerId') {
                        ensureJobEntry(jobId);
                        var m = $('#' + jobId + ' > .processing-messages');
                        m.removeClass('hidden')
                            .append($('<div/>').html(progressMessage))
                            .scrollTop(m.prop('scrollHeight'));
                    }
                });

            connection.on('statusUpdated',
                function(ownerId, jobId, jobStatus) {
                    console.log('statusUpdated', ownerId, jobId, jobStatus);
                    if (ownerId === '@Model.SelectedOwnerId') {
                        ensureJobEntry(jobId);
                        var statusText = getJobStatusText(jobStatus);
                        $('#' + jobId + ' .job-status')
                            .html(statusText);
                        $('#' + jobId)
                            .removeClass('positive negative info warning')
                            .addClass(getJobStatusClass(jobStatus));
                        if (statusText === "Failed" || statusText === "Completed") {
                            var ll = $('#' + jobId + ' > .log-link');
                            ll.removeClass('hidden');
                            var m = $('#' + jobId + ' > .processing-messages');
                            m.addClass('hidden');
                        }
                    }
                });

            connection.on('datasetUpdated',
                function(ownerId, repoId, datasetInfo) {
                    console.log('datasetUpdated', ownerId, repoId, datasetInfo);
                });

//            connection.on('logUpdated',
//                function(ownerId, jobId, logLink) {
//                    if (ownerId === '@Model.SelectedOwnerId') {
//                        ensureJobEntry(jobId);
//                        $('#' + jobId + ' .log-link').append($("<a/>").attr('href', logLink).html('Download full log'));
//                        var dsUrl = $('#' + jobId + ' p#iri').text();
//                        var dsLink = $("<a />",
//                            {
//                                href: dsUrl,
//                                text: dsUrl,
//                                'style': 'font-weight:bold;'
//                            });
//                        $('#' + jobId + ' p#iri').text().append(dsLink);
//                    }
//                });

            connection.start().then(() => {
                console.log('ProgressHub Connected');
                @{
                    if (String.IsNullOrEmpty(Model.SelectedRepoId))
                    {
                        <text>
                            console.log('Subscribe to channel: @(Model.SelectedOwnerId)');
                            connection.invoke('subscribe', '@(Model.SelectedOwnerId)');
                        </text>
                    }
                    else
                    {
                        <text>
                            console.log('Subscribe to channel: @(Model.SelectedOwnerId)_@(Model.SelectedRepoId)');
                            connection.invoke('subscribe', '@(Model.SelectedOwnerId)_@(Model.SelectedRepoId)');
                        </text>
                    }
                }
            });
        });

        function ensureJobEntry(jobId) {
            var match = $('#' + jobId);
            if (match.length === 0) {
                console.log('No element found for ', jobId, 'Page will be reloaded');
                document.location.reload(true);
            }
            return match;
        }

        function htmlEncode(value) {
            var encodedValue = $('<div/>').text(value).html();
            return encodedValue;
        }

        function getJobStatusText(statusCode) {
            switch (statusCode) {
            case 0:
                return "Queued";
            case 1:
                return "Running";
            case 2:
                return "Completed";
            case 3:
                return "Failed";
            default:
                return "--";
            }
        }

        function getJobStatusClass(statusCode) {
            switch (statusCode) {
            case 0:
                return "info";
            case 1:
                return "warning";
            case 2:
                return "positive";
            case 3:
                return "negative";
            default:
                return "info";
            }
        }
    </script>
}